# -*- coding: utf-8 -*-
"""toynetwork_influence.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13NcX7dB6pj7yKZXN_KqS_cMJFlGoglrU
"""

from google.colab import drive
drive.mount('/content/drive')

import networkx as nx
import matplotlib.pyplot as plt    #ploting the graph
import pandas as pd
import numpy as np

G_df1=pd.read_csv("/content/drive/MyDrive/Colab Notebooks/First_Work/Toydata_MyAlgoithm/toydata.csv")

G_df1

G1=nx.from_pandas_edgelist(G_df1, 'source', 'target')

hist = nx.classes.function.degree_histogram(G1)
print(hist)

KshellVal_df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/First_Work/Toydata_MyAlgoithm/kshellValuesToydata.csv")

KshellVal_df

list1 = KshellVal_df['Node_number'].tolist()

list1

df1 = pd.DataFrame()

for source in list1:
       shortest_path= nx.single_source_dijkstra_path_length(G1,source,weight = '1')
       #dict_df = pd.DataFrame.from_dict(shortest_path)
       n_lis = [(value) for key, value in sorted(shortest_path.items())] 
       df1 = df1.append(pd.DataFrame([n_lis]))
       print(n_lis)

df1

vals = df1.values
print(vals)

# convert to list
print('---------------------')
print('Convert values to list')
print(vals.tolist())

"""Graph influence of each node( ks/d)"""

KshellVal_df.drop(['Node_number'], axis = 1)
kshellvals = KshellVal_df.values

k_shell_list = KshellVal_df['K-shell values'].tolist()


nodes_distances = vals.tolist()
GI_infl = {}
count = 0;
#for k_shell in k_shell_list:
for nodes_distance in nodes_distances:
  sum = 0
  for index in range(len(nodes_distance)):
    if nodes_distance[index] == 0 :
      continue
    tmp =  k_shell_list[index]/nodes_distance[index] 
    sum = sum + tmp
    #print (nodes_distance[int(index)], sum, k_shell_list[int(index)]) 
  #GI = {count :   tmp + GI[count] }
  #GI[count] =  GI[count] + tmp
  GI_infl[count] = sum
  print (GI_infl[count])
  count = count + 1

import pandas as pd

(pd.DataFrame.from_dict(data=GI_infl, orient='index')
   .to_csv('GI_centrality.csv', header=False))

"""#Eigen Vector centrality of each node"""

centrality = nx.eigenvector_centrality(G1)
print(['%s %0.2f'%(node,centrality[node]) for node in centrality])

centrality

import pandas as pd

(pd.DataFrame.from_dict(data=centrality, orient='index')
   .to_csv('Eigen_vector_centrality.csv', header=False))

"""#final global influence"""

global_df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/First_Work/Toydata_MyAlgoithm/Global_Influence.csv")

global_df

global_df['GI']

"""#Self Influence

Degree centrality of each node
"""

Degree_centrality_node = nx.degree_centrality(G1)
print(['%s %0.2f'%(node,Degree_centrality_node[node]) for node in Degree_centrality_node])

import pandas as pd

(pd.DataFrame.from_dict(data=Degree_centrality_node, orient='index')
   .to_csv('Degree_centrality.csv', header=False))

GI_df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/First_Work/Toydata_MyAlgoithm/Degree_centrality.csv")

import math
degree_cent = GI_df['influence'].tolist()
k_shell_list = KshellVal_df['K-shell values'].tolist()

SI = {}
count = 0

for index in range(len(k_shell_list)):
  power_result = k_shell_list[index] * degree_cent[index]
  Final_result = math.sqrt(power_result)

  #print("Exponential Value is: ", )
  SI[count] = Final_result
  print (SI[count])
  count = count + 1

"""#GI * SI"""

global_infl = global_df['GI'].tolist()
for index in range(len(global_infl)):
  Final_result = global_infl[index] * SI[index]
  print(Final_result)

